@startuml uml
class Redis
{
    private Connect redis_connect
    public Redis(const char* addr, int port)
    public ~Redis();
    public int isConnect();
    public int create(int type, const char* json)
    public int read(int type, const char *key)
    public int update()
    public int erase(int type, const char *key)
}
class Connect
{
    private const char* addr;
    private int port;
    private int connect_status;
    private int redis_socket;
    private struct sockaddr_in redis_server;
    public Connect(const char* addr, int port);
    public int isConnect();
    public int redisConnect();
    public int disConnect();
    public int redisSend(const char* query);
}
class Validation
{
    public int isStringEmpty(const char *string);
}
class Create
{
    private int type;
    private const char *schemaName;
    private const char *json;
    private Connect *redis_connect;
    private int createSchemaByJSON();
    private int createNodeByJSON();
    public Create(int type, std::map<const char *, const char *> data);
    public Create(int type, const char *json, Connect *connect);
    public ~Create();
    public int execute();
    
}
class Read
{
    private int type;
    private const char *key;
    private Connect *redis_connect;
    private int readSchemaKeys();
    private int readSchemaList();
    public Read(int type, const char*key, Connect *connect);
    public ~Read();
    public int execute();
}
class Update
{
    private int type;
    private const char *json;
    private Connect *redis_connect;
    private const char *schemaName;
    private int updateSchema();
    public Update(int type, const char *json, Connect *redis_connect);
    public ~Update();
    public int execute();
}
class Erase
{
    private int eraseSchema();
    private int type;
    private const char *key;
    private Connect *redis_connect;
    public Erase(int type, const char *key, Connect *redis_connect);
    public ~Erase();
    public int execute();
}
@enduml